// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/aws/credentials (interfaces: ProviderWithContext,Expirer)

// Package mock_credentials is a generated GoMock package.
package mock_credentials

import (
	context "context"
	reflect "reflect"
	time "time"

	credentials "github.com/aws/aws-sdk-go/aws/credentials"
	gomock "github.com/golang/mock/gomock"
)

// MockProviderWithContext is a mock of ProviderWithContext interface.
type MockProviderWithContext struct {
	ctrl     *gomock.Controller
	recorder *MockProviderWithContextMockRecorder
}

// MockProviderWithContextMockRecorder is the mock recorder for MockProviderWithContext.
type MockProviderWithContextMockRecorder struct {
	mock *MockProviderWithContext
}

// NewMockProviderWithContext creates a new mock instance.
func NewMockProviderWithContext(ctrl *gomock.Controller) *MockProviderWithContext {
	mock := &MockProviderWithContext{ctrl: ctrl}
	mock.recorder = &MockProviderWithContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderWithContext) EXPECT() *MockProviderWithContextMockRecorder {
	return m.recorder
}

// IsExpired mocks base method.
func (m *MockProviderWithContext) IsExpired() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExpired")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExpired indicates an expected call of IsExpired.
func (mr *MockProviderWithContextMockRecorder) IsExpired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExpired", reflect.TypeOf((*MockProviderWithContext)(nil).IsExpired))
}

// Retrieve mocks base method.
func (m *MockProviderWithContext) Retrieve() (credentials.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve")
	ret0, _ := ret[0].(credentials.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockProviderWithContextMockRecorder) Retrieve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockProviderWithContext)(nil).Retrieve))
}

// RetrieveWithContext mocks base method.
func (m *MockProviderWithContext) RetrieveWithContext(arg0 context.Context) (credentials.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveWithContext", arg0)
	ret0, _ := ret[0].(credentials.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveWithContext indicates an expected call of RetrieveWithContext.
func (mr *MockProviderWithContextMockRecorder) RetrieveWithContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveWithContext", reflect.TypeOf((*MockProviderWithContext)(nil).RetrieveWithContext), arg0)
}

// MockExpirer is a mock of Expirer interface.
type MockExpirer struct {
	ctrl     *gomock.Controller
	recorder *MockExpirerMockRecorder
}

// MockExpirerMockRecorder is the mock recorder for MockExpirer.
type MockExpirerMockRecorder struct {
	mock *MockExpirer
}

// NewMockExpirer creates a new mock instance.
func NewMockExpirer(ctrl *gomock.Controller) *MockExpirer {
	mock := &MockExpirer{ctrl: ctrl}
	mock.recorder = &MockExpirerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpirer) EXPECT() *MockExpirerMockRecorder {
	return m.recorder
}

// ExpiresAt mocks base method.
func (m *MockExpirer) ExpiresAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpiresAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ExpiresAt indicates an expected call of ExpiresAt.
func (mr *MockExpirerMockRecorder) ExpiresAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpiresAt", reflect.TypeOf((*MockExpirer)(nil).ExpiresAt))
}
