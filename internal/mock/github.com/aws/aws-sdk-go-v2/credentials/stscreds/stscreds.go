// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go-v2/credentials/stscreds (interfaces: AssumeRoleAPIClient)

// Package mock_stscreds is a generated GoMock package.
package mock_stscreds

import (
	context "context"
	reflect "reflect"

	sts "github.com/aws/aws-sdk-go-v2/service/sts"
	gomock "github.com/golang/mock/gomock"
)

// MockAssumeRoleAPIClient is a mock of AssumeRoleAPIClient interface.
type MockAssumeRoleAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAssumeRoleAPIClientMockRecorder
}

// MockAssumeRoleAPIClientMockRecorder is the mock recorder for MockAssumeRoleAPIClient.
type MockAssumeRoleAPIClientMockRecorder struct {
	mock *MockAssumeRoleAPIClient
}

// NewMockAssumeRoleAPIClient creates a new mock instance.
func NewMockAssumeRoleAPIClient(ctrl *gomock.Controller) *MockAssumeRoleAPIClient {
	mock := &MockAssumeRoleAPIClient{ctrl: ctrl}
	mock.recorder = &MockAssumeRoleAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssumeRoleAPIClient) EXPECT() *MockAssumeRoleAPIClientMockRecorder {
	return m.recorder
}

// AssumeRole mocks base method.
func (m *MockAssumeRoleAPIClient) AssumeRole(arg0 context.Context, arg1 *sts.AssumeRoleInput, arg2 ...func(*sts.Options)) (*sts.AssumeRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssumeRole", varargs...)
	ret0, _ := ret[0].(*sts.AssumeRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole.
func (mr *MockAssumeRoleAPIClientMockRecorder) AssumeRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockAssumeRoleAPIClient)(nil).AssumeRole), varargs...)
}
