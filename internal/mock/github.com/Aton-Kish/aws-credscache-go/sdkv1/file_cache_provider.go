// Code generated by MockGen. DO NOT EDIT.
// Source: file_cache_provider.go

// Package mock_credscache is a generated GoMock package.
package mock_credscache

import (
	reflect "reflect"
	time "time"

	credentials "github.com/aws/aws-sdk-go/aws/credentials"
	gomock "github.com/golang/mock/gomock"
)

// MockexpireProviderWithContext is a mock of expireProviderWithContext interface.
type MockexpireProviderWithContext struct {
	ctrl     *gomock.Controller
	recorder *MockexpireProviderWithContextMockRecorder
}

// MockexpireProviderWithContextMockRecorder is the mock recorder for MockexpireProviderWithContext.
type MockexpireProviderWithContextMockRecorder struct {
	mock *MockexpireProviderWithContext
}

// NewMockexpireProviderWithContext creates a new mock instance.
func NewMockexpireProviderWithContext(ctrl *gomock.Controller) *MockexpireProviderWithContext {
	mock := &MockexpireProviderWithContext{ctrl: ctrl}
	mock.recorder = &MockexpireProviderWithContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexpireProviderWithContext) EXPECT() *MockexpireProviderWithContextMockRecorder {
	return m.recorder
}

// ExpiresAt mocks base method.
func (m *MockexpireProviderWithContext) ExpiresAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpiresAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ExpiresAt indicates an expected call of ExpiresAt.
func (mr *MockexpireProviderWithContextMockRecorder) ExpiresAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpiresAt", reflect.TypeOf((*MockexpireProviderWithContext)(nil).ExpiresAt))
}

// IsExpired mocks base method.
func (m *MockexpireProviderWithContext) IsExpired() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExpired")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExpired indicates an expected call of IsExpired.
func (mr *MockexpireProviderWithContextMockRecorder) IsExpired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExpired", reflect.TypeOf((*MockexpireProviderWithContext)(nil).IsExpired))
}

// Retrieve mocks base method.
func (m *MockexpireProviderWithContext) Retrieve() (credentials.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve")
	ret0, _ := ret[0].(credentials.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockexpireProviderWithContextMockRecorder) Retrieve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockexpireProviderWithContext)(nil).Retrieve))
}

// RetrieveWithContext mocks base method.
func (m *MockexpireProviderWithContext) RetrieveWithContext(arg0 credentials.Context) (credentials.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveWithContext", arg0)
	ret0, _ := ret[0].(credentials.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveWithContext indicates an expected call of RetrieveWithContext.
func (mr *MockexpireProviderWithContextMockRecorder) RetrieveWithContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveWithContext", reflect.TypeOf((*MockexpireProviderWithContext)(nil).RetrieveWithContext), arg0)
}
